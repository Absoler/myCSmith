#!/bin/bash

#-----
#   this script is used to judge whether target.c will 
#   introduce an additional load
#
#-----

root_dir=
opt_option=
pin_root=
test_type=
# `positive_compiler` or `negative_compiler` should be defined,
# indicated

> full.c

cat $root_dir/test/define.c >> full.c
cat target.c >> full.c
cat $root_dir/test/main.c >> full.c

if [ -z $positive_compiler ] ; then
    positive=0
    compiler=$negative_compiler
else
    positive=1
    compiler=$positive_compiler
fi
${compiler//+/ } full.c -I $root_dir/runtime -gdwarf-4 $opt_option -o full >/dev/null 2>info
compile_stat=$?
if [ $compile_stat -ne 0 ]; then
    # echo "fail due to compilation error: " $compile_stat >> $root_dir/reduce.log
    exit 1
fi

# avoid loss of all type, which lead to failure of coccinelle's analysis
s=`cat info | grep "type" | grep "defaults to"`
if [ -n "$s" ] ; then
    exit 1
fi

timeout -s SIGTERM 5s $pin_root/pin -t $root_dir/checkAccess/obj-intel64/checkAccess.so -- ./full $test_type func ./ 1>/dev/null 1>&2
run_stat=$?
if [ $run_stat -ne 0 ]; then
    exit 1
fi

$root_dir/test/compare.py ./descript.out $root_dir/test/descript.$compiler

if [ $? -ne 0 ] ; then
    exit 1
fi
exit 0