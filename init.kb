#! /bin/bash

# init project:
#   set some variables and create some directories/files, maybe build
#   
#   args[1]: optimization option (-O2)
#   args[2]: test type (introduce load or store, 0 and 1 respectively)
#   args[3]: pin_root path (the absolute path to the pin package)
#   args[4]: gcc's program name in `PATH`
#   args[5]: clang's program name in `PATH`
#   args[6]: host directory where docker container's shares
#   if no args, clear all env vars
# -------------------

kb_scripts=(`find ./ -name "*.kb"`)
py_scripts=(`find ./ -name "*.py"`)
pl_scripts=(`find ./ -name "*.pl"`)

scripts=(${kb_scripts[*]} ${py_scripts[*]} ${pl_scripts[*]})


if [ $# -ne 0 -a $# -ne 6 ] ; then
    echo "## This script takes 0 argumets or 5, to set or reset config variables"
    echo "#   args[1]: optimization option (-O2)
#   args[2]: test type (introduce load or store, 0 and 1 respectively)
#   args[3]: pin_root path (the absolute path to the pin package)
#   args[4]: gcc's program name in \`PATH\`
#   args[5]: clang's program name in \`PATH\`
#   args[6]: host directory where docker container's shares"

    exit
fi

if [ $# -lt 1 ] ; then
    for file in ${scripts[*]} ; do
        sed "s%^\(\$\?root_dir=\).*%\1%" $file -i.bak
        sed "s%^\(\$\?default_option=\).*%\1%" $file -i.bak
        sed "s%^\(\$\?test_type=\).*%\1%" $file -i.bak
        sed "s%^\(\$\?pin_root=\).*%\1%" $file -i.bak
        sed "s%^\(\$\?gcc_name=\).*%\1%" $file -i.bak
        sed "s%^\(\$\?clang_name=\).*%\1%" $file -i.bak
        sed "s%^\(\$\?host_root_dir=\).*%\1%" $file -i.bak
    done
    echo "# all config variables cleared!"
    exit
fi

# add execution permission to all scripts
for file in ${scripts[*]} ; do
    chmod +x $file
done

# replace var `root_dir` with current working directory
for file in ${kb_scripts[*]} ; do
    sed "s%^\(root_dir=\).*%\1`pwd`%" $file -i.bak
done
for file in ${py_scripts[*]} ; do
    sed "s%^\(root_dir=\).*%\1\"`pwd`\"%" $file -i.bak
done
for file in ${pl_scripts[*]} ; do
    sed "s%^\(\$root_dir=\).*%\1\"`pwd`\";%" $file -i.bak
done

# set optimization option
for file in ${kb_scripts[*]} ; do
    sed "s%^\(default_option=\).*%\1$1%" $file -i.bak
done
for file in ${py_scripts[*]} ; do
    sed "s%^\(default_option=\).*%\1\"$1\"%" $file -i.bak
done

# choose test target: load or store
# indicated by args[2], 0 means load, 1 means store
for file in ${kb_scripts[*]} ; do
    sed "s%^\(test_type=\).*%\1$2%" $file -i.bak
done
for file in ${py_scripts[*]} ; do
    sed "s%^\(test_type=\).*%\1\"$2\"%" $file -i.bak
done

# indicate pin root path, args[3]
for file in ${kb_scripts[*]} ; do
    sed "s%^\(pin_root=\).*%\1$3%" $file -i.bak
done
for file in ${py_scripts[*]} ; do
    sed "s%^\(pin_root=\).*%\1\"$3\"%" $file -i.bak
done

# set gcc and clang's program names
for file in ${kb_scripts[*]} ; do
    sed "s%^\(gcc_name=\).*%\1$4%" $file -i.bak
    sed "s%^\(clang_name=\).*%\1$5%" $file -i.bak
done
for file in ${py_scripts[*]} ; do
    sed "s%^\(gcc_name=\).*%\1\"$4\"%" $file -i.bak
    sed "s%^\(clang_name=\).*%\1\"$5\"%" $file -i.bak
done
for file in ${pl_scripts[*]} ; do
    sed "s%^\(\$gcc_name=\).*%\1\"$4\";%" $file -i.bak
    sed "s%^\(\$clang_name=\).*%\1\"$5\";%" $file -i.bak
done

# set host mount directory
for file in ${kb_scripts[*]} ; do
    sed "s%^\(host_root_dir=\).*%\1$6%" $file -i.bak
done

# make necessary directories and files
if [ ! -d "./problem" ] ; then
    mkdir ./problem
fi

if [ ! -d "./patterns" ] ; then
    mkdir ./patterns
fi

if [ ! -d "./compileFail" ] ; then
    mkdir ./compileFail
fi

if [ ! -f "./base.out" ] ; then 
    echo 1 > base.out
    echo 0 >> base.out
fi

if [ ! -f "./match/boring" ] ; then
    > ./match/boring
fi