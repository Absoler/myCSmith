#! /bin/bash

# init project:
#   set some variables and create some directories/files, maybe build
#   
#   args[1]: optimization option (-O2)
#   args[2]: test type (introduce load or store, 0 and 1 respectively)
#   args[3]: pin_root path (the absolute path to the pin package)
#   args[4]: whether build (None means not, 1 means build in `build` directory)
# -------------------

kb_scripts=(`find ./ -name "*.kb"`)
py_scripts=(`find ./ -name "*.py"`)
# replace var `root_dir` with current working directory

for file in ${kb_scripts[*]} ; do
    chmod +x $file
    sed "s%^\(root_dir=\).*%\1`pwd`%" $file -i.bak
done

# choose opt option
for file in ${kb_scripts[*]} ; do
    chmod +x $file
    sed "s%^\(opt_option=\).*%\1$1%" $file -i.bak
done

# choose test target: load or store
# indicated by args[2], 0 means load, 1 means store
for file in ${kb_scripts[*]} ; do
    chmod +x $file
    sed "s%^\(test_type=\).*%\1$2%" $file -i.bak
done

# indicate pin root path
for file in ${kb_scripts[*]} ; do
    chmod +x $file
    sed "s%^\(pin_root=\).*%\1$3%" $file -i.bak
done

if [ $# -ge 4 ] ; then
    if [ $4 -eq 1 ] ; then
        # build csmith
        mkdir ./build
        cd build
        cmake ..
        make -j 4
        cd ..
        # build pintool
        ./makePintool.kb
    fi
fi


if [ ! -d "./problem" ] ; then
    mkdir ./problem
fi

if [ ! -d "./patterns" ] ; then
    mkdir ./patterns
fi

if [ ! -d "./compileFail" ] ; then
    mkdir ./compileFail
fi

if [ ! -f "./base.out" ] ; then 
    echo 0 > base.out
    echo 0 >> base.out
fi