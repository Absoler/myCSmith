#! /bin/bash

#-----
#   this script invoke csmith to generate C files and judge 
#   whether a multi-load problem happen on a compiler
#   
#   args[1] is the number of tests
#   
#-----


opt_option=
test_type=
pin_root=

if [ $# -ge 1 ]; then
    limit=$1
else
    limit=1000000000
fi
if [ $test_type -eq 1 ]; then
    type_option=--store
else
    type_option=""
fi
compilers=("gcc-12.1"  "clang")

# 1th line of base.out is the number of C cases, 2th line is the next of current reduced case
read base < ./base.out

cnt=0
fail_cnt=0  # recording the number of problem cases
run_err=0
while [ $cnt -lt $limit ]
# while true
do
    build/src/csmith $type_option --copyPropagation --no-safe-math --no-bitfields --no-volatiles --probability-configuration ./prob.txt  -o runtime/output2.c 1>/dev/null
    fail=0  # fail flag
    for compiler in ${compilers[*]} ; do
        $compiler runtime/output2.c -gdwarf-4 -w $opt_option -o runtime/output2
        if [ $? -gt 0 ] ; then
            echo $compiler compilation error
            cp runtime/output2.c compileFail/${cnt}output2.c
            break
        fi 
        timeout -s SIGTERM 5s $pin_root/pin -t checkAccess/obj-intel64/checkAccess.so -- runtime/output2 $test_type func ./ 1>/dev/null
        ret=$?
        if [ $ret -eq 134 ] ; then
            cp runtime/output2.c pinErr/${cnt}output2.c
        fi
        if [ $ret -gt 0 ] ; then
            ((run_err++))
            continue
        fi
        read line < ./result.out
        if [ $line == 1 ] ; then
            fail=1
            echo ./record.kb ${compiler} $[ base + fail_cnt ]
            ./record.kb ${compiler} $[ base + fail_cnt ]
            echo $compiler fail
        fi    
       
    done
    
    if [ $fail == 1 ] ; then
        ((fail_cnt++))
        sed "1c $[base+fail_cnt]" -i base.out
    fi

    if [ $[cnt%1000] == 0 ] ; then
        echo `date`
        echo $cnt cases tested
        echo runtime error $run_err
    fi
    
    ((cnt++))
done

printf "%d cases tested\n" $cnt
